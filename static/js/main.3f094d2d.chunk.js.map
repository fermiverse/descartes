{"version":3,"sources":["graphics/close.svg","graphics/marker1.svg","graphics/marker2.svg","graphics/earth.svg","graphics/regmap.svg","graphics/graph.svg","graphics/information.svg","components/Map.js","components/Sidebar.js","components/Output.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","current","Map","origin","setOrigin","destinations","setDestinations","useState","latitude","longitude","width","height","zoom","viewPort","setViewPort","updateView","setUpdateView","showSatMap","toggleShowSatMap","draw","init","drawLine","toggleDrawLine","beaconDist","setBeaconDist","haverSine","co1","co2","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","atan2","sqrt","keyDown","e","key","useEffect","setTimeout","window","addEventListener","removeEventListener","id","mapboxApiAccessToken","mapStyle","onViewportChange","onClick","newCoord","lngLat","onHover","style","position","right","top","view","className","title","src","lineIcon","alt","left","color","toFixed","length","draggable","onDragEnd","offsetLeft","offsetTop","originMarker","map","destination","uuid","modDests","slice","i","indexOf","newCoords","splice","destinationMarker","mapIcon","earthIcon","Sidebar","showOutput","toggleShowOutput","showInfo","toggleShowInfo","validateField","lat","lng","isNaN","abs","form","type","onSubmit","preventDefault","target","elements","value","Number","reset","alert","placeholder","autoComplete","display","alignItems","float","marginTop","marginBottom","String","index","newDestinations","CloseIcon","InfoIcon","contentEditable","flexWrap","rawString","coords","split","newPoints","coord","push","digestRaw","document","getElementById","innerText","innerHTML","path","item","join","axios","get","then","res","snappedCoords","data","snappedPoints","location","confirm","err","Output","outCoords","showConfirm","toggleShowConfirm","closeIcon","outText","textContent","navigator","clipboard","writeText","marginLeft","App","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f094d2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.8b20cee7.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker1.3f22cecd.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker2.5ce11098.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.11093ee1.svg\";","module.exports = __webpack_public_path__ + \"static/media/regmap.07ddfa3b.svg\";","module.exports = __webpack_public_path__ + \"static/media/graph.cc27234c.svg\";","module.exports = __webpack_public_path__ + \"static/media/information.8bbb0af1.svg\";","import React, { useState, useEffect } from 'react';\r\nimport ReactMapGL, { Marker, NavigationControl, GeolocateControl } from 'react-map-gl';\r\nimport uuid from 'react-uuid';\r\nimport originMarker from '../graphics/marker1.svg';\r\nimport destinationMarker from '../graphics/marker2.svg';\r\nimport earthIcon from '../graphics/earth.svg';\r\nimport mapIcon from '../graphics/regmap.svg';\r\nimport lineIcon from '../graphics/graph.svg';\r\n\r\nlet current = [];\r\n\r\nconst Map = ({origin, setOrigin, destinations, setDestinations}) => {\r\n    const [viewPort, setViewPort] = useState({\r\n        latitude: origin[1],\r\n        longitude: origin[0], \r\n        width: \"75vw\",\r\n        height: \"100vh\",\r\n        zoom: 14\r\n    });\r\n\r\n    const [updateView, setUpdateView] = useState(true);\r\n\r\n    const [showSatMap, toggleShowSatMap] = useState(false);\r\n\r\n    const [drawLine, toggleDrawLine] = useState({draw: false, init: true});\r\n\r\n    const [beaconDist, setBeaconDist] = useState(null);\r\n\r\n    const handleMapClick = (e) => {\r\n        if (drawLine.init) {\r\n            toggleDrawLine({draw: true, init: false});\r\n            return ;\r\n        } else {\r\n            let newCoord = e.lngLat;\r\n            current = newCoord;\r\n            if (origin[0]) {\r\n                setDestinations([...destinations, newCoord]);\r\n            } else {\r\n                setOrigin(newCoord);\r\n        }\r\n        }\r\n    };\r\n\r\n    const handleMapHover = (e) => {\r\n        if (current && current[0]) setBeaconDist(haverSine(current, e.lngLat));\r\n    }\r\n\r\n    const handleOriginDrag = (e) => {\r\n        setUpdateView(false);\r\n        setOrigin(e.lngLat);\r\n    };\r\n\r\n    const haverSine = (co1, co2) => {\r\n        \t\r\n        const R = 6371e3; // metres\r\n        const φ1 = co1[1] * Math.PI/180; // φ, λ in radians\r\n        const φ2 = co2[1] * Math.PI/180;\r\n        const Δφ = (co2[1] - co1[1]) * Math.PI/180;\r\n        const Δλ = (co2[0] - co1[0]) * Math.PI/180;\r\n\r\n        const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r\n                Math.cos(φ1) * Math.cos(φ2) *\r\n                Math.sin(Δλ/2) * Math.sin(Δλ/2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n        const d = R * c; // in metres\r\n\r\n        return d;\r\n    };\r\n\r\n    const keyDown = (e) => {\r\n        if (e.key === \"Escape\") toggleDrawLine({draw: false, init: true});\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (updateView) {\r\n            setTimeout(() => {\r\n                setViewPort({\r\n                    latitude: origin[1],\r\n                    longitude: origin[0], \r\n                    width: \"75vw\",\r\n                    height: \"100vh\",\r\n                    zoom: 14 \r\n                })\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            setUpdateView(true);\r\n        }\r\n    }, [origin]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", keyDown)\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", keyDown);\r\n        }\r\n    }, [drawLine]);\r\n\r\n    return ( \r\n        <div id=\"map\">\r\n            <ReactMapGL\r\n            {...viewPort}\r\n            mapboxApiAccessToken={\"pk.eyJ1IjoiZmVybWl2ZXJzZSIsImEiOiJja2Q2YzJ3Zjkwam1mMnFuMG1zNjg5eDhmIn0.SwCaqFKXTC_-WkcbYqFcsQ\"}\r\n            mapStyle={showSatMap ? \"mapbox://styles/mapbox/satellite-v9\" : \"mapbox://styles/fermiverse/ckd7yqq7u084t1iqj97nvbjc6\"}\r\n            onViewportChange={(viewPort) => {\r\n                setViewPort(viewPort)\r\n            }}\r\n            onClick={drawLine.draw ? handleMapClick : null}\r\n            onHover={drawLine.draw ? handleMapHover : null}>\r\n                <div style={{position: 'absolute', right: \"15px\", top: \"30px\"}}>\r\n                    <NavigationControl />\r\n                </div>\r\n                <div style={{position: \"absolute\", top: \"135px\", right: \"15px\"}}>\r\n                    <GeolocateControl \r\n                    onViewportChange={(view) => {\r\n                        setViewPort({\r\n                            latitude: origin[1] || 28.494164,\r\n                            longitude: origin[0] || 77.516233,\r\n                            width: \"75vw\",\r\n                            height: \"100%\",\r\n                            zoom: 14\r\n                        });\r\n                    }}\r\n                    />\r\n                </div>\r\n                <button className=\"line\" title=\"Line string\" onClick={() => {toggleDrawLine({draw: !drawLine.draw, init: true})}}>\r\n                    <img src={lineIcon} alt=\"line\" width=\"16px\"></img>\r\n                </button>\r\n                {drawLine.draw ? (\r\n                    <div style={{position: \"absolute\", left: \"15px\", top: \"15px\", color: \"white\"}}>\r\n                        <p>Draw Mode ON, press Esc to exit</p>\r\n                        {beaconDist ? (<h3>{`Displacement: ${beaconDist.toFixed(3)}m`}</h3>) : null}\r\n                    </div>\r\n                ) : (null)}\r\n                {origin.length ? (\r\n                    <Marker\r\n                    latitude={origin[1]}\r\n                    longitude={origin[0]}\r\n                    draggable={true}\r\n                    onDragEnd={handleOriginDrag}\r\n                    offsetLeft={-16}\r\n                    offsetTop={-38.71}>\r\n                        <div title=\"origin\">\r\n                            <img src={originMarker} alt=\"marker\" width=\"32px\" className=\"marker\"></img>\r\n                        </div>\r\n                    </Marker>\r\n                ) : (null)}\r\n                {destinations.map(destination => (\r\n                    <Marker\r\n                    key={uuid()}\r\n                    latitude={destination[1]}\r\n                    longitude={destination[0]}\r\n                    draggable={true}\r\n                    onDragEnd={(e) => {\r\n                        let modDests = destinations.slice();\r\n                        let i = destinations.indexOf(destination);\r\n                        let newCoords = e.lngLat;\r\n                        modDests.splice(i, 1, newCoords);\r\n                        setDestinations(modDests);\r\n                    }}\r\n                    offsetLeft={-16}\r\n                    offsetTop={-38.71}>\r\n                        <div title={`destination_${destinations.indexOf(destination)+1}`}>\r\n                            <img src={destinationMarker} alt=\"marker\" width=\"32px\" className=\"marker\"></img>\r\n                        </div>\r\n                    </Marker>\r\n                ))}\r\n                {showSatMap ? (\r\n                    <button className=\"blank\" id=\"toggle\" title=\"Regular View\" onClick={() => {toggleShowSatMap(!showSatMap)}}>\r\n                        <img src={mapIcon} alt=\"mapicon\" width=\"30px\"></img>\r\n                    </button>\r\n                ) : (\r\n                    <button className=\"blank\" id=\"toggle\" title=\"Satellite View\" onClick={() => {toggleShowSatMap(!showSatMap)}}>\r\n                        <img src={earthIcon} alt=\"sat\" width=\"30px\"></img>\r\n                    </button>\r\n                )}\r\n                <button className=\"rounded\" id=\"reset\" onClick={() => {\r\n                    toggleDrawLine({draw: false, init: true});\r\n                    setUpdateView(false);\r\n                    setOrigin([]);\r\n                    setDestinations([]);\r\n                }}>Reset</button>\r\n            </ReactMapGL>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Map;\r\n\r\n","import React, { useState } from 'react';\r\nimport CloseIcon from '../graphics/close.svg';\r\nimport InfoIcon from '../graphics/information.svg';\r\nimport axios from 'axios';\r\n\r\nconst Sidebar = ({destinations, setDestinations, origin, setOrigin, showOutput, toggleShowOutput}) => {\r\n    \r\n    const [showInfo, toggleShowInfo] = useState(false);\r\n    const digestRaw = (rawString) => {\r\n        let coords = rawString.split('\\n');\r\n        let newPoints = [];\r\n        for (let coord of coords) {\r\n            coord = coord.split(',');\r\n            if (validateField(...coord)) {\r\n                newPoints.push([Number(coord[1]), Number(coord[0])]);\r\n            }\r\n        }\r\n        if (!newPoints[0]) return ;\r\n\r\n        setOrigin(newPoints[0]);\r\n        setDestinations(newPoints.slice(1,));\r\n    }\r\n\r\n    const validateField = (lat, lng) => {\r\n        if (lat === \"\" || lng === \"\") {\r\n            return false;\r\n        }\r\n        let isValid = (!isNaN(lat) && !isNaN(lng) && Math.abs(+lat) <= 90.0 && Math.abs(+lng) <= 180.0) ? true : false;\r\n        return isValid\r\n    }\r\n\r\n    const form = (type) => {\r\n        if (type === \"origin\") {\r\n            return (\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const lat = e.target.elements[0].value;\r\n                    const lng = e.target.elements[1].value;\r\n                    if (validateField(lat, lng)) {\r\n                        setOrigin([Number(lng), Number(lat)]);\r\n                        e.target.reset()\r\n                    } else {\r\n                        alert(\"Enter valid coordinates in origin field!\");\r\n                    }\r\n                }}>\r\n                    <input type=\"text\" id=\"latitude\" placeholder=\"Latitude\" autoComplete=\"off\"></input>\r\n                    <input type=\"text\" id=\"longitude\" placeholder=\"Longitude\" autoComplete=\"off\"></input>\r\n                    <button className=\"rounded\" type=\"submit\">Set</button>\r\n                </form>\r\n            )\r\n        } else {\r\n            return (\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const lat = e.target.elements[0].value;\r\n                    const lng = e.target.elements[1].value;\r\n                    if (validateField(lat, lng)) {\r\n                        setDestinations([...destinations, [Number(lng), Number(lat)]]);\r\n                        e.target.reset()\r\n                    } else {\r\n                        alert(\"Enter valid coordinates in destination field!\");\r\n                    }\r\n                }}>\r\n                    <input type=\"text\" id=\"latitude\" placeholder=\"Latitude\" autoComplete=\"off\"></input>\r\n                    <input type=\"text\" id=\"longitude\" placeholder=\"Longitude\" autoComplete=\"off\"></input>\r\n                    <button className=\"rounded\" type=\"submit\">Add</button>\r\n                </form>\r\n            )\r\n        }\r\n    }\r\n        \r\n    const snapCoords = () => {\r\n        if (destinations.length === 0) alert(\"No destinations set!\");\r\n        let pathArr = destinations.map(item => String(item[1] + \",\" + item[0]));\r\n        let path = pathArr.join(\"|\");\r\n        try {\r\n            axios.get(`https://roads.googleapis.com/v1/snapToRoads?path=${path}&key=AIzaSyCyX-H1_PMVUFTL1Cv4wWwj6CN1U3mWtDc`)\r\n            .then((res) => {\r\n                let snappedCoords = res.data.snappedPoints;\r\n                snappedCoords = snappedCoords.map(coord => [coord.location.longitude, coord.location.latitude]);\r\n                let conf = window.confirm(\"Are you sure you want to snap destinations to the nearest road?\");\r\n                if (conf) setDestinations(snappedCoords);\r\n                else alert(\"Snap aborted\");\r\n            })\r\n        }\r\n        catch(err) {\r\n            alert(\"Error occurred while snapping\");\r\n        }\r\n    }\r\n    \r\n    return ( \r\n        <div id=\"sidebar\">\r\n            <div style={{display: \"flex\", width: \"80%\"}}>\r\n                <div>\r\n                    <h1>descartes v1.1</h1>\r\n                </div>\r\n                <div style={{display: \"flex\", alignItems: \"center\", float: \"right\"}}>\r\n                    <button className=\"collapse\">{\"< >\"}</button>\r\n                </div>\r\n            </div>\r\n            \r\n            <div>\r\n                <div className=\"form-container\">\r\n                    <p>Origin</p>\r\n                    {(origin && origin.length) ? (\r\n                        <div style={{color: \"blue\", marginTop: \"5px\", marginBottom: \"5px\"}}>{`(${origin[1].toFixed(8)}, ${origin[0].toFixed(8)})`}</div>\r\n                    ) : (null)}\r\n                    {form(\"origin\")}\r\n                </div>\r\n                <div className=\"form-container\">\r\n                    <p>Destination(s)</p>\r\n                    <div style={{marginTop: \"5px\", marginBottom: \"5px\"}}>\r\n                        {destinations.length ? (\r\n                            destinations.map((destination) => (\r\n                                <div key={String(destination[0])} style={{color: \"blue\", display: \"flex\", alignItems: \"baseline\"}}>\r\n                                    <p>{`${destinations.indexOf(destination)+1}. (${destination[1].toFixed(8)}, ${destination[0].toFixed(8)})`}</p>\r\n                                    <button className=\"blank\" onClick={() => {\r\n                                        let index = destinations.indexOf(destination);\r\n                                        let newDestinations = destinations.slice();\r\n                                        if (index > -1) {\r\n                                            newDestinations.splice(index, 1);\r\n                                            setDestinations(newDestinations);\r\n                                        }\r\n                                    }}><img src={CloseIcon} alt=\"close\" width=\"12px\"></img></button>\r\n                                </div> \r\n                            ))\r\n                        ) : (<p>No destinations yet!</p>)}\r\n                    </div>\r\n                    {form()}\r\n                </div>\r\n            </div>\r\n            <div className=\"form-container\">\r\n                <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <p>Raw Input</p>\r\n                    <button className=\"blank\" onClick={() => {toggleShowInfo(!showInfo)}}>\r\n                        <img src={InfoIcon} alt=\"info\" width=\"12px\"></img>\r\n                    </button>\r\n                </div>\r\n                {showInfo ? (\r\n                    <p style={{color: \"rgb(90, 90, 90)\"}}>Enter coordinates as lat, lng on separate lines. First coordinate is considered origin, the rest, destinations.</p>\r\n                ) : (null)}\r\n                \r\n                <div id=\"raw\" contentEditable=\"true\"></div>\r\n                <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\r\n                    <button className=\"rounded\" onClick={() => {\r\n                        const rawString = document.getElementById(\"raw\").innerText;\r\n                        digestRaw(rawString);\r\n                        document.getElementById(\"raw\").innerHTML = \"\";\r\n                    }}>Insert</button>\r\n                    <button className=\"rounded\" id=\"snap\" onClick={snapCoords} title=\"snap to road\">Snap</button>\r\n                    <button className=\"rounded\" id=\"pop\" onClick={() => {toggleShowOutput(!showOutput)}} title=\"output\">Output</button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Sidebar;\r\n","import React, { useState } from 'react';\r\nimport closeIcon from '../graphics/close.svg';\r\n\r\n\r\n\r\nconst Output = ({showOutput, toggleShowOutput, origin, destinations}) => {\r\n\r\n    let outCoords = [origin, ...destinations];\r\n    const [showConfirm, toggleShowConfirm] = useState(false);\r\n\r\n    return ( \r\n        <div className=\"output\">\r\n            <div className=\"form-container\">\r\n                <div style={{display: \"flex\", width: \"100%\", position: \"relative\"}}>\r\n                    <p>Raw Output</p>\r\n                    <button className=\"blank\" id=\"close\" title=\"close\" onClick={() => {\r\n                        toggleShowOutput(false);\r\n                    }}>\r\n                        <img src={closeIcon} alt=\"close\" width=\"15px\"></img>\r\n                    </button>\r\n                </div>\r\n                {origin[0] ? (\r\n                    <div>\r\n                        <div id=\"output-coords\" style={{marginTop: \"30px\", marginBottom: \"10px\", color: \"blue\"}}>\r\n                            {outCoords.map((coord) => (\r\n                                <p>{`${coord[1]}, ${coord[0]}`}</p>\r\n                            ))}\r\n                        </div>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <button className=\"rounded\" id=\"copy\" title=\"copy\" onClick={() => {\r\n                                let outElem = document.getElementById(\"output-coords\");\r\n                                let outText = outElem.textContent;\r\n                                navigator.clipboard.writeText(outText)\r\n                                .then(() => {toggleShowConfirm(true)});\r\n                            }}>Copy</button>\r\n                            {showConfirm ? (\r\n                                <div style={{color: \"rgb(100,100,100)\", marginLeft: \"20px\", marginTop: \"12px\"}}>\r\n                                    Copied to clipboard\r\n                                </div>\r\n                            ) : (null)}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div>No coordinates specified!</div>\r\n                )}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Output;\r\n","import React, { useState } from 'react';\nimport Map from './components/Map';\nimport Sidebar from './components/Sidebar';\nimport Output from './components/Output';\n\n\nconst App = () => {\n  const [origin, setOrigin] = useState([77.516233, 28.494164]);\n  const [destinations, setDestinations] = useState([]);\n  const [showOutput, toggleShowOutput] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Sidebar destinations={destinations} setDestinations={setDestinations} origin={origin} setOrigin={setOrigin} showOutput={showOutput} toggleShowOutput={toggleShowOutput} />\n      <Map origin={origin} setOrigin={setOrigin} destinations={destinations} setDestinations={setDestinations} />\n      {showOutput ? (\n        <Output showOutput={showOutput} toggleShowOutput={toggleShowOutput} origin={origin} destinations={destinations} />\n      ) : (null)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}