{"version":3,"sources":["graphics/close.svg","graphics/marker1.svg","graphics/marker2.svg","graphics/earth.svg","graphics/regmap.svg","graphics/information.svg","components/Map.js","components/Sidebar.js","components/Output.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","origin","setOrigin","destinations","setDestinations","useState","latitude","longitude","width","height","zoom","viewPort","setViewPort","showSatMap","toggleShowSatMap","id","mapboxApiAccessToken","mapStyle","onViewportChange","style","position","right","top","view","length","draggable","onDragEnd","e","lngLat","title","src","originMarker","alt","className","map","destination","key","String","modDests","slice","i","indexOf","newCoords","splice","destinationMarker","onClick","mapIcon","earthIcon","Sidebar","showOutput","toggleShowOutput","showInfo","toggleShowInfo","validateField","lat","lng","isNaN","Math","abs","form","type","onSubmit","preventDefault","target","elements","value","Number","reset","alert","placeholder","autoComplete","display","alignItems","float","color","marginTop","marginBottom","toFixed","index","newDestinations","CloseIcon","InfoIcon","contentEditable","rawString","coords","split","newPoints","coord","push","digestRaw","document","getElementById","innerText","innerHTML","path","item","join","axios","get","then","res","snappedCoords","data","snappedPoints","location","window","confirm","err","Output","outCoords","showConfirm","toggleShowConfirm","closeIcon","outText","textContent","navigator","clipboard","writeText","marginLeft","App","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2d0e2b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.8b20cee7.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker1.3f22cecd.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker2.5ce11098.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.11093ee1.svg\";","module.exports = __webpack_public_path__ + \"static/media/regmap.07ddfa3b.svg\";","module.exports = __webpack_public_path__ + \"static/media/information.8bbb0af1.svg\";","import React, { useState } from 'react';\r\nimport ReactMapGL, { Marker, NavigationControl, GeolocateControl } from 'react-map-gl';\r\nimport originMarker from '../graphics/marker1.svg';\r\nimport destinationMarker from '../graphics/marker2.svg';\r\nimport earthIcon from '../graphics/earth.svg';\r\nimport mapIcon from '../graphics/regmap.svg';\r\n\r\nconst Map = ({origin, setOrigin, destinations, setDestinations}) => {\r\n    const [viewPort, setViewPort] = useState({\r\n        latitude: origin[1],\r\n        longitude: origin[0], \r\n        width: \"75vw\",\r\n        height: \"100vh\",\r\n        zoom: 14\r\n    });\r\n\r\n    const [showSatMap, toggleShowSatMap] = useState(false);\r\n\r\n    const handleOriginDrag = (e) => {\r\n        setOrigin(e.lngLat);\r\n    };\r\n\r\n    return ( \r\n        <div id=\"map\">\r\n            <ReactMapGL\r\n            {...viewPort}\r\n            mapboxApiAccessToken={\"pk.eyJ1IjoiZmVybWl2ZXJzZSIsImEiOiJja2Q2YzJ3Zjkwam1mMnFuMG1zNjg5eDhmIn0.SwCaqFKXTC_-WkcbYqFcsQ\"}\r\n            mapStyle={showSatMap ? \"mapbox://styles/mapbox/satellite-v9\" : \"mapbox://styles/fermiverse/ckd7yqq7u084t1iqj97nvbjc6\"}\r\n            onViewportChange={(viewPort) => {\r\n                setViewPort(viewPort)\r\n            }}>\r\n                <div style={{position: 'absolute', right: \"15px\", top: \"30px\"}}>\r\n                    <NavigationControl />\r\n                </div>\r\n                <div style={{position: \"absolute\", top: \"135px\", right: \"15px\"}}>\r\n                    <GeolocateControl \r\n                    onViewportChange={(view) => {\r\n                        setViewPort({\r\n                            latitude: origin[1] || 28.494164,\r\n                            longitude: origin[0] || 77.516233,\r\n                            width: \"75vw\",\r\n                            height: \"100%\",\r\n                            zoom: 12\r\n                        });\r\n                    }}\r\n                    />\r\n                </div>\r\n                {origin.length ? (\r\n                    <Marker\r\n                    latitude={origin[1]}\r\n                    longitude={origin[0]}\r\n                    draggable={true}\r\n                    onDragEnd={handleOriginDrag}>\r\n                        <div title=\"origin\">\r\n                            <img src={originMarker} alt=\"marker\" width=\"32px\" className=\"marker\"></img>\r\n                        </div>\r\n                    </Marker>\r\n                ) : (null)}\r\n                {destinations.map(destination => (\r\n                    <Marker\r\n                    key={String(destination[1])}\r\n                    latitude={destination[1]}\r\n                    longitude={destination[0]}\r\n                    draggable={true}\r\n                    onDragEnd={(e) => {\r\n                        let modDests = destinations.slice();\r\n                        let i = destinations.indexOf(destination);\r\n                        let newCoords = e.lngLat;\r\n                        modDests.splice(i, 1, newCoords);\r\n                        setDestinations(modDests);\r\n                    }}>\r\n                        <div title={`destination_${destinations.indexOf(destination)+1}`}>\r\n                            <img src={destinationMarker} alt=\"marker\" width=\"32px\" className=\"marker\"></img>\r\n                        </div>\r\n                    </Marker>\r\n                ))}\r\n                {showSatMap ? (\r\n                    <button className=\"blank\" id=\"toggle\" title=\"Regular View\" onClick={() => {toggleShowSatMap(!showSatMap)}}>\r\n                        <img src={mapIcon} alt=\"mapicon\" width=\"30px\"></img>\r\n                    </button>\r\n                ) : (\r\n                    <button className=\"blank\" id=\"toggle\" title=\"Satellite View\" onClick={() => {toggleShowSatMap(!showSatMap)}}>\r\n                        <img src={earthIcon} alt=\"sat\" width=\"30px\"></img>\r\n                    </button>\r\n                )}\r\n                <button className=\"rounded\" id=\"reset\" onClick={() => {\r\n                    setOrigin([]);\r\n                    setDestinations([]);\r\n                }}>Reset</button>\r\n            </ReactMapGL>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Map;\r\n\r\n","import React, { useState } from 'react';\r\nimport CloseIcon from '../graphics/close.svg';\r\nimport InfoIcon from '../graphics/information.svg';\r\nimport axios from 'axios';\r\n\r\nconst Sidebar = ({destinations, setDestinations, origin, setOrigin, showOutput, toggleShowOutput}) => {\r\n    \r\n    const [showInfo, toggleShowInfo] = useState(false);\r\n    const digestRaw = (rawString) => {\r\n        let coords = rawString.split('\\n');\r\n        let newPoints = [];\r\n        for (let coord of coords) {\r\n            coord = coord.split(',');\r\n            if (validateField(...coord)) {\r\n                newPoints.push([Number(coord[1]), Number(coord[0])]);\r\n            }\r\n        }\r\n        if (!newPoints[0]) return ;\r\n        if (newPoints.length !== coords.length) alert(\"Some coordinates in raw input are invalid\");\r\n        setOrigin(newPoints[0]);\r\n        setDestinations(newPoints.slice(1,));\r\n    }\r\n\r\n    const validateField = (lat, lng) => {\r\n        if (lat === \"\" || lng === \"\") {\r\n            return false;\r\n        }\r\n        let isValid = (!isNaN(lat) && !isNaN(lng) && Math.abs(+lat) <= 90.0 && Math.abs(+lng) <= 180.0) ? true : false;\r\n        return isValid\r\n    }\r\n\r\n    const form = (type) => {\r\n        if (type === \"origin\") {\r\n            return (\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const lat = e.target.elements[0].value;\r\n                    const lng = e.target.elements[1].value;\r\n                    if (validateField(lat, lng)) {\r\n                        setOrigin([Number(lng), Number(lat)]);\r\n                        e.target.reset()\r\n                    } else {\r\n                        alert(\"Enter valid coordinates in origin field!\");\r\n                    }\r\n                }}>\r\n                    <input type=\"text\" id=\"latitude\" placeholder=\"Latitude\" autoComplete=\"off\"></input>\r\n                    <input type=\"text\" id=\"longitude\" placeholder=\"Longitude\" autoComplete=\"off\"></input>\r\n                    <button className=\"rounded\" type=\"submit\">Set</button>\r\n                </form>\r\n            )\r\n        } else {\r\n            return (\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const lat = e.target.elements[0].value;\r\n                    const lng = e.target.elements[1].value;\r\n                    if (validateField(lat, lng)) {\r\n                        setDestinations([...destinations, [Number(lng), Number(lat)]]);\r\n                        e.target.reset()\r\n                    } else {\r\n                        alert(\"Enter valid coordinates in destination field!\");\r\n                    }\r\n                }}>\r\n                    <input type=\"text\" id=\"latitude\" placeholder=\"Latitude\" autoComplete=\"off\"></input>\r\n                    <input type=\"text\" id=\"longitude\" placeholder=\"Longitude\" autoComplete=\"off\"></input>\r\n                    <button className=\"rounded\" type=\"submit\">Add</button>\r\n                </form>\r\n            )\r\n        }\r\n    }\r\n        \r\n    const snapCoords = () => {\r\n        if (destinations.length === 0) alert(\"No destinations set!\");\r\n        let pathArr = destinations.map(item => String(item[1] + \",\" + item[0]));\r\n        let path = pathArr.join(\"|\");\r\n        try {\r\n            axios.get(`https://roads.googleapis.com/v1/snapToRoads?path=${path}&key=AIzaSyCyX-H1_PMVUFTL1Cv4wWwj6CN1U3mWtDc`)\r\n            .then((res) => {\r\n                let snappedCoords = res.data.snappedPoints;\r\n                snappedCoords = snappedCoords.map(coord => [coord.location.longitude, coord.location.latitude]);\r\n                let conf = window.confirm(\"Are you sure you want to snap destinations to the nearest road?\");\r\n                if (conf) setDestinations(snappedCoords);\r\n                else alert(\"Snap aborted\");\r\n            })\r\n        }\r\n        catch(err) {\r\n            alert(\"Error occurred while snapping\");\r\n        }\r\n    }\r\n    \r\n    return ( \r\n        <div id=\"sidebar\">\r\n            <div style={{display: \"flex\", width: \"80%\"}}>\r\n                <div>\r\n                    <h1>descartes v1.0</h1>\r\n                </div>\r\n                <div style={{display: \"flex\", alignItems: \"center\", float: \"right\"}}>\r\n                    <button className=\"collapse\">{\"< >\"}</button>\r\n                </div>\r\n            </div>\r\n            \r\n            <div>\r\n                <div className=\"form-container\">\r\n                    <p>Origin</p>\r\n                    {(origin && origin.length) ? (\r\n                        <div style={{color: \"blue\", marginTop: \"5px\", marginBottom: \"5px\"}}>{`(${origin[1].toFixed(8)}, ${origin[0].toFixed(8)})`}</div>\r\n                    ) : (null)}\r\n                    {form(\"origin\")}\r\n                </div>\r\n                <div className=\"form-container\">\r\n                    <p>Destination(s)</p>\r\n                    <div style={{marginTop: \"5px\", marginBottom: \"5px\"}}>\r\n                        {destinations.length ? (\r\n                            destinations.map((destination) => (\r\n                                <div key={String(destination[0])} style={{color: \"blue\", display: \"flex\", alignItems: \"baseline\"}}>\r\n                                    <p>{`(${destination[1].toFixed(8)}, ${destination[0].toFixed(8)})`}</p>\r\n                                    <button className=\"blank\" onClick={() => {\r\n                                        let index = destinations.indexOf(destination);\r\n                                        let newDestinations = destinations.slice();\r\n                                        if (index > -1) {\r\n                                            newDestinations.splice(index, 1);\r\n                                            setDestinations(newDestinations);\r\n                                        }\r\n                                    }}><img src={CloseIcon} alt=\"close\" width=\"12px\"></img></button>\r\n                                </div> \r\n                            ))\r\n                        ) : (<p>No destinations yet!</p>)}\r\n                    </div>\r\n                    {form()}\r\n                </div>\r\n            </div>\r\n            <div className=\"form-container\">\r\n                <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <p>Raw Input</p>\r\n                    <button className=\"blank\" onClick={() => {toggleShowInfo(!showInfo)}}>\r\n                        <img src={InfoIcon} alt=\"info\" width=\"12px\"></img>\r\n                    </button>\r\n                </div>\r\n                {showInfo ? (\r\n                    <p style={{color: \"rgb(90, 90, 90)\"}}>Enter coordinates as lat, lng on separate lines. First coordinate is considered origin, the rest, destinations.</p>\r\n                ) : (null)}\r\n                \r\n                <div id=\"raw\" contentEditable=\"true\"></div>\r\n                <div style={{display: \"flex\"}}>\r\n                    <button className=\"rounded\" onClick={() => {\r\n                        const rawString = document.getElementById(\"raw\").innerText;\r\n                        digestRaw(rawString);\r\n                        document.getElementById(\"raw\").innerHTML = \"\";\r\n                    }}>Insert</button>\r\n                    <button className=\"rounded\" id=\"snap\" onClick={snapCoords} title=\"snap to road\">Snap</button>\r\n                    <button className=\"rounded\" id=\"pop\" onClick={() => {toggleShowOutput(!showOutput)}} title=\"output\">Output</button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Sidebar;\r\n","import React, { useState } from 'react';\r\nimport closeIcon from '../graphics/close.svg';\r\n\r\n\r\n\r\nconst Output = ({showOutput, toggleShowOutput, origin, destinations}) => {\r\n\r\n    let outCoords = [origin, ...destinations];\r\n    const [showConfirm, toggleShowConfirm] = useState(false);\r\n\r\n    return ( \r\n        <div className=\"output\">\r\n            <div className=\"form-container\">\r\n                <div style={{display: \"flex\", width: \"100%\", position: \"relative\"}}>\r\n                    <p>Raw Output</p>\r\n                    <button className=\"blank\" id=\"close\" title=\"close\" onClick={() => {\r\n                        toggleShowOutput(false);\r\n                    }}>\r\n                        <img src={closeIcon} alt=\"close\" width=\"15px\"></img>\r\n                    </button>\r\n                </div>\r\n                {origin[0] ? (\r\n                    <div>\r\n                        <div id=\"output-coords\" style={{marginTop: \"30px\", marginBottom: \"10px\", color: \"blue\"}}>\r\n                            {outCoords.map((coord) => (\r\n                                <p>{`${coord[1]}, ${coord[0]}`}</p>\r\n                            ))}\r\n                        </div>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <button className=\"rounded\" id=\"copy\" title=\"copy\" onClick={() => {\r\n                                let outElem = document.getElementById(\"output-coords\");\r\n                                let outText = outElem.textContent;\r\n                                navigator.clipboard.writeText(outText)\r\n                                .then(() => {toggleShowConfirm(true)});\r\n                            }}>Copy</button>\r\n                            {showConfirm ? (\r\n                                <div style={{color: \"rgb(100,100,100)\", marginLeft: \"20px\", marginTop: \"12px\"}}>\r\n                                    Copied to clipboard\r\n                                </div>\r\n                            ) : (null)}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div>No coordinates specified!</div>\r\n                )}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Output;\r\n","import React, { useState } from 'react';\nimport Map from './components/Map';\nimport Sidebar from './components/Sidebar';\nimport Output from './components/Output';\n\n\nconst App = () => {\n  const [origin, setOrigin] = useState([77.516233, 28.494164]);\n  const [destinations, setDestinations] = useState([]);\n  const [showOutput, toggleShowOutput] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Sidebar destinations={destinations} setDestinations={setDestinations} origin={origin} setOrigin={setOrigin} showOutput={showOutput} toggleShowOutput={toggleShowOutput} />\n      <Map origin={origin} setOrigin={setOrigin} destinations={destinations} setDestinations={setDestinations} />\n      {showOutput ? (\n        <Output showOutput={showOutput} toggleShowOutput={toggleShowOutput} origin={origin} destinations={destinations} />\n      ) : (null)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}